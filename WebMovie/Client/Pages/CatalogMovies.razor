@page "/"
@page "/catalogmovies"
@using WebMovie.Shared
@inject HttpClient Http
@inject IMovieServices _moviesServices
@inject NavigationManager NavigationManager


<div class="py-5">
    <div class="container">
        <p>Filters:</p>
        <RadzenDropDown AllowClear="true" Placeholder="Choose one" TValue="string" AllowVirtualization="true" Style="width:300px"
                        AllowFiltering="true" Data=@types
                        Change=@(args => OnChange(args, "Filter")) />
        <br />
        <br />
        <br />
        <div class="row hidden-md-up">
            @if (showPopular)
            {
                @foreach (var item in popularMoviesList)
                {
                    var poster = string.Concat("https://image.tmdb.org/t/p/w500", item.poster_path);
                    <div class="col-md-4">
                        <div class="cards-deck">
                            <a @onclick="@(() => informationMovies(item))">
                                <CardMovies titleMovie="@item.title" 
                                            overviewMovie="@item.overview" 
                                            posterMovie="@poster" 
                                            ratingMovie="@item.vote_average" 
                                            releaseMovie="@item.release_date">
                                </CardMovies>
                            </a>
                        </div>
                    </div>
                }
            }

            @if (showUpcoming)
            {
                @foreach (var item in upcomingMoviesList)
                {
                    var poster = string.Concat("https://image.tmdb.org/t/p/w500", item.poster_path);
                    <div class="col-md-4">
                        <div class="cards-deck">
                            <a @onclick="@(() => informationMovies(item))">
                                <CardMovies titleMovie="@item.title"
                                            overviewMovie="@item.overview"
                                            posterMovie="@poster"
                                            ratingMovie="@item.vote_average"
                                            releaseMovie="@item.release_date">
                                </CardMovies>
                            </a>
                        </div>
                    </div>
                }
            }

        </div>
    </div>
</div>

@code {

    List<Result> popularMoviesList = new List<Result>();
    List<Result> upcomingMoviesList = new List<Result>();
    List<string> types = new List<string>();
    Result MovieDetail = new Result();
    Constants Constants = new Constants();
    bool showPopular = true;
    bool showUpcoming = false;


    protected override async Task OnInitializedAsync()
    {
        popularMoviesList = await _moviesServices.GetPopularMovies();
        upcomingMoviesList = await _moviesServices.GetUpcomingMovies();
        FillArray();
    }

    void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        if (value.ToString() == Constants.itemFilterPopular)
        {
            showPopular = true;
            showUpcoming = false;
        }
        else
        {
            showUpcoming = true;
            showPopular = false;
        }
    }

    public async Task informationMovies(Result movie)
    {
        NavigationManager.NavigateTo($"{Constants.routeToInformationMovies}/{movie.id}");
    }

    public void FillArray()
    {
        types.Add(Constants.itemFilterPopular);
        types.Add(Constants.itemFilterUpcoming);
    }
}
